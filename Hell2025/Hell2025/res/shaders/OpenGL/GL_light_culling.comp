#version 460

#include "../common/types.glsl"
#include "../common/constants.glsl"

layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D WorldPositionTexture;
layout (binding = 1) uniform sampler2D NormalTexture;

readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

readonly restrict layout(std430, binding = 4) buffer lightsBuffer {
	Light lights[];
};

layout(std430, binding = 5) buffer tileDataBuffer {
    TileLightData tileData[];
};

uniform float u_viewportWidth;
uniform float u_viewportHeight;
uniform int u_lightCount;
uniform int u_tileXCount;
uniform int u_tileYCount;

shared uint minWorldSpaceXInt;
shared uint maxWorldSpaceXInt;
shared uint minWorldSpaceYInt;
shared uint maxWorldSpaceYInt;
shared uint minWorldSpaceZInt;
shared uint maxWorldSpaceZInt;

shared uint tilelightCount;
shared uint validDepthSampleCount;
shared vec3 debugOutputColor;

bool SphereVsAABB(vec3 aabbMin, vec3 aabbMax, vec3 sphereOrigin, float sphereRadius) {
    vec3 closestPoint = clamp(sphereOrigin, aabbMin, aabbMax);
    float distanceSquared = dot(closestPoint - sphereOrigin, closestPoint - sphereOrigin);
    return distanceSquared <= (sphereRadius * sphereRadius);
}

bool AABBsIntersect(vec3 minA, vec3 maxA, vec3 minB, vec3 maxB) {
    return !(minA.x > maxB.x || maxA.x < minB.x ||
             minA.y > maxB.y || maxA.y < minB.y ||
             minA.z > maxB.z || maxA.z < minB.z);
}

uint OrderPreservingFloatMap(float value) {
    uint uvalue = floatBitsToUint(value);
    uint mask = -int(uvalue >> 31) | 0x80000000;
    return uvalue ^ mask;
}

float InverseOrderPreservingFloatMap(uint value) {
    uint mask = ((value >> 31) - 1) | 0x80000000;
    return uintBitsToFloat(value ^ mask);
}

void main() {

	const int tileSize = TILE_SIZE;	
    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 outputImageSize = vec2(u_viewportWidth, u_viewportHeight);
    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);
    
    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }   
    
	uint tileIndex = gl_WorkGroupID.y * u_tileXCount + gl_WorkGroupID.x;

	// Defaults
	if (gl_LocalInvocationIndex == 0) {	
		minWorldSpaceXInt = 0xFFFFFFFF;
		minWorldSpaceYInt = 0xFFFFFFFF;
		minWorldSpaceZInt = 0xFFFFFFFF;
		maxWorldSpaceXInt = 0;
		maxWorldSpaceYInt = 0;
		maxWorldSpaceZInt = 0;		
		tileData[tileIndex].lightCount = 0;	
		tilelightCount = 0;
		validDepthSampleCount = 0;
	}
	barrier();

    vec3 fragmentNormal = texture(NormalTexture, uv_screenspace).rgb;
	bool validFragment = fragmentNormal != vec3(0, 0, 0);
    
	// Atomically store min max depth 
	if (validFragment) {
        vec3 worldSpacePosition = texture(WorldPositionTexture, uv_screenspace).rgb;
    
        uint worldSpaceXInt = OrderPreservingFloatMap(worldSpacePosition.x);
		uint worldSpaceYInt = OrderPreservingFloatMap(worldSpacePosition.y);
		uint worldSpaceZInt = OrderPreservingFloatMap(worldSpacePosition.z);	
		atomicMin(minWorldSpaceXInt, worldSpaceXInt);
		atomicMin(minWorldSpaceYInt, worldSpaceYInt);
		atomicMin(minWorldSpaceZInt, worldSpaceZInt);  
		atomicMax(maxWorldSpaceXInt, worldSpaceXInt);
		atomicMax(maxWorldSpaceYInt, worldSpaceYInt);
		atomicMax(maxWorldSpaceZInt, worldSpaceZInt);
		atomicAdd(validDepthSampleCount, 1);
	}
    barrier();

	// Get this tiles min max world pos
	float worldSpaceXMin = InverseOrderPreservingFloatMap(minWorldSpaceXInt);
	float worldSpaceYMin = InverseOrderPreservingFloatMap(minWorldSpaceYInt);
	float worldSpaceZMin = InverseOrderPreservingFloatMap(minWorldSpaceZInt);
	float worldSpaceXMax = InverseOrderPreservingFloatMap(maxWorldSpaceXInt);
	float worldSpaceYMax = InverseOrderPreservingFloatMap(maxWorldSpaceYInt);
	float worldSpaceZMax = InverseOrderPreservingFloatMap(maxWorldSpaceZInt);
	vec3 worldSpaceMin = vec3(worldSpaceXMin, worldSpaceYMin, worldSpaceZMin);
	vec3 worldSpaceMax = vec3(worldSpaceXMax, worldSpaceYMax, worldSpaceZMax);	
	
	// Light culling
	if (validDepthSampleCount > 0) {
		int invocationCount = tileSize * tileSize;
		int loopCount = (u_lightCount + invocationCount - 1) / invocationCount;
		
        for (int i = 0; i < loopCount; i++) {		
			uint lightIndex = gl_LocalInvocationIndex + i * invocationCount;
			
            if (lightIndex < u_lightCount) {
				vec3 lightPos = vec3(lights[lightIndex].posX, lights[lightIndex].posY, lights[lightIndex].posZ);
				float lightRadius = lights[lightIndex].radius;			

				//vec3 lightAabbMin = vec3(lightVolumeData[lightIndex].aabbMinX, lightVolumeData[lightIndex].aabbMinY, lightVolumeData[lightIndex].aabbMinZ);
				//vec3 lightAabbMax = vec3(lightVolumeData[lightIndex].aabbMaxX, lightVolumeData[lightIndex].aabbMaxY, lightVolumeData[lightIndex].aabbMaxZ);	
				
                vec3 lightAabbMin = lightPos - lightRadius;
                vec3 lightAabbMax = lightPos + lightRadius;
                
                if (AABBsIntersect(worldSpaceMin, worldSpaceMax, lightAabbMin, lightAabbMax) && SphereVsAABB(worldSpaceMin, worldSpaceMax, lightPos, lightRadius)) {
				    uint index = atomicAdd(tilelightCount, 1);

                    const int MAX_LIGHTS_PER_TILE = 127;
                    if (index < MAX_LIGHTS_PER_TILE) {
                        tileData[tileIndex].lightIndices[index] = int(lightIndex);
                    }
				}
			}
		}
	}
	barrier();

	if (gl_LocalInvocationIndex == 0) {
		tileData[tileIndex].lightCount = tilelightCount;
		debugOutputColor = worldSpaceMin;
	}
}