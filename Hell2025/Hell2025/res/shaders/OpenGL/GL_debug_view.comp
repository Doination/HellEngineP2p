#version 460

#include "../common/types.glsl"
#include "../common/constants.glsl"

layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform image2D OutputImage;
layout (binding = 1) uniform sampler2D GBufferBaseColorTexture;
layout (binding = 2) uniform sampler2D GBufferNormalTexture;
layout (binding = 3) uniform sampler2D GBufferRMATexture;
layout (binding = 4) uniform usampler2D ViewportIndexTexture;

shared vec3 sharedDebugOutputColor;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer { RendererData rendererData; };
readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer { ViewportData viewportData[]; };

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputImageSize = imageSize(OutputImage);
    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);
    
    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }   
    
	vec3 lightingColor = imageLoad(OutputImage, pixelCoords).rgb;
    vec3 baseColor = texture(GBufferBaseColorTexture, uv_screenspace).rgb;
    vec3 normal = texture(GBufferNormalTexture, uv_screenspace).rgb;
    vec3 rma = texture(GBufferRMATexture, uv_screenspace).rgb;
    uint viewportIndex = texture(ViewportIndexTexture, uv_screenspace).r;
    mat4 viewMatrix = viewportData[viewportIndex].view;
    mat4 inverseView = viewportData[viewportIndex].inverseView;

    vec3 finalColor = lightingColor.rgb * vec3(1,0,0);

    
    // Renderer override states
    if (rendererData.rendererOverrideState == 1) {
        finalColor = baseColor;
    }
    else if (rendererData.rendererOverrideState == 2) {
        finalColor = normal;
    }
    else if (rendererData.rendererOverrideState == 3) {
        finalColor = rma;
    }
    else if (rendererData.rendererOverrideState == 4) {
        vec3 lightDir = normalize(inverseView[2].xyz);
        float ndotl = max(dot(normal.xyz, lightDir), 0.0);
        vec3 lightColor = vec3(0.5, 0.5, 0.6) * ndotl;
        vec3 color = baseColor.rgb * ndotl;
        finalColor = mix(baseColor.rgb, color, 0.5);
    }

    imageStore(OutputImage, pixelCoords, vec4(finalColor, 1));	
}
