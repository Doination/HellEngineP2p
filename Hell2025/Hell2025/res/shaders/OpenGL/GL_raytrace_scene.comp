#version 430 core
#include "../common/post_processing.glsl"
#include "../common/types.glsl"
#include "../common/util.glsl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 directLighting;
};

struct BvhNode {
    vec3 boundsMin;
    uint firstChildOrPrimitive;
    vec3 boundsMax;
    uint primitiveCount;
};

struct EntityInstance {
    mat4 worldTransform;
    mat4 inverseWorldTransform;
    int rootNodeIndex;
    int objectId;
    int padding1;
    int padding2;
};

layout(std430, binding = 0) buffer PointCloudBuffer          { CloudPoint points[]; };
layout(std430, binding = 1) readonly buffer triangleData     { float TriangleData[]; };
layout(std430, binding = 2) readonly buffer sceneNodes       { BvhNode SceneNodes[]; };
layout(std430, binding = 3) readonly buffer meshNodes        { BvhNode MeshNodes[]; };
layout(std430, binding = 4) readonly buffer entityInstances  { EntityInstance EntityInstances[]; };

#define MAX_BVH_STACK_SIZE 16
#define PI 3.14159265359
#define BLUE_NOISE_SIZE 64

// "Slab test" ray-aabb intersection algorithm
bool IntersectNode(in vec3 rayOrigin, in vec3 rayDirInv, float minDistance, float maxDistance, in vec3 boundsMin, in vec3 boundsMax) {
    vec3 t1 = (boundsMin - rayOrigin) * rayDirInv;
    vec3 t2 = (boundsMax - rayOrigin) * rayDirInv;
    vec3 tminVec = min(t1, t2);
    vec3 tmaxVec = max(t1, t2);
    float tmin = max(max(tminVec.x, tminVec.y), max(tminVec.z, minDistance));
    float tmax = min(min(tmaxVec.x, tmaxVec.y), min(tmaxVec.z, maxDistance));
    return tmin <= tmax;
}

// Möller-Trumbore ray-triangle interesction algorithm
bool IntersectTriangle(in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance, in vec3 p0, in vec3 e1, in vec3 e2, in vec3 normal) {
    vec3 c = p0 - rayOrigin;
    vec3 r = cross(rayDir, c);
    float det = dot(normal, rayDir);
    if (det == 0.0) return false;
    float invDet = 1.0 / det;
    float u = dot(r, e2) * invDet;
    float v = dot(r, e1) * invDet;
    float w = 1.0 - u - v;
    if (u >= 0.0 && v >= 0.0 && w >= 0.0) {
        float t = dot(normal, c) * invDet;
        return (t >= minDistance && t < maxDistance);
    }
    return false;
}

// Ray-mesh bvh interesction
bool MeshAnyHit(in uint rootNodeIndex, in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance, in mat4 inverseWorldTransform) {
    uint stack[MAX_BVH_STACK_SIZE];
    uint stack_size = 0;
    stack[stack_size++] = rootNodeIndex;
    
    // Precompute transformed ray in mesh space once
    vec3 localOrigin = vec3(inverseWorldTransform * vec4(rayOrigin, 1.0));
    vec3 localEnd = vec3(inverseWorldTransform * vec4(rayOrigin + rayDir * maxDistance, 1.0));
    vec3 localDir = normalize(localEnd - localOrigin);
    float localMaxDistance = length(localEnd - localOrigin);
    float localMinDistance = minDistance * localMaxDistance / maxDistance;
    vec3 localDirInv = 1.0 / localDir;
    
    // Walk the bvh
    while (stack_size != 0) {
        uint current = stack[--stack_size];
        BvhNode node = MeshNodes[current];

        // If there was no ray hit with this node, skip th children
        if (!IntersectNode(localOrigin, localDirInv, localMinDistance, localMaxDistance, node.boundsMin, node.boundsMax)) {
            continue;
        }
        
        // If there was a hit, and the current node is a leaf, then walk the bvh of each triangles within this leaf node
        else if (node.primitiveCount > 0) {
            for (int i = 0; i < int(node.primitiveCount); i++) {
                uint triStart = node.firstChildOrPrimitive + (i * 12);
                vec3 p0 = vec3(TriangleData[triStart + 0], TriangleData[triStart + 1], TriangleData[triStart + 2]);
                vec3 e1 = vec3(TriangleData[triStart + 3], TriangleData[triStart + 4], TriangleData[triStart + 5]);
                vec3 e2 = vec3(TriangleData[triStart + 6], TriangleData[triStart + 7], TriangleData[triStart + 8]);
                vec3 normal = vec3(TriangleData[triStart + 9], TriangleData[triStart + 10], TriangleData[triStart + 11]);
                if (IntersectTriangle(localOrigin, localDir, localMinDistance, localMaxDistance, p0, e1, e2, normal))
                    return true;
            }
        } 
        // Otherwise, recursively process the child nodes
        else {
            // Prevent stack overflow
            if (stack_size >= MAX_BVH_STACK_SIZE - 1) {
                    continue;
            } else {
                    stack[stack_size++] = node.firstChildOrPrimitive;
                    stack[stack_size++] = node.firstChildOrPrimitive + 1;
            }
        }
    }
    return false;
}

// Scene-mesh bvh interesction
int AnyHit(in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance) {
    uint stack[MAX_BVH_STACK_SIZE];
    uint stack_size = 0;
    stack[stack_size++] = 0; // start with the rootnode
    vec3 rayDirInv = 1.0 / rayDir;
    
    // Walk the bvh
    while (stack_size != 0) {
        uint current = stack[--stack_size];
        BvhNode node = SceneNodes[current];

        // If there is no ray hit on the node AABB, then skip its children
        if (!IntersectNode(rayOrigin, rayDirInv, minDistance, maxDistance, node.boundsMin, node.boundsMax))
            continue;

        // If there was a hit, and the current node is a leaf, then walk the bvh of each entity within this leaf node
        else if (node.primitiveCount > 0) {
            for (int i = 0; i < int(node.primitiveCount); i++) {
                EntityInstance instance = EntityInstances[node.firstChildOrPrimitive + i];

               // if (instance.padding0 == 999) {
               //     return false;
               // }


                if (MeshAnyHit(uint(instance.rootNodeIndex), rayOrigin, rayDir, minDistance, maxDistance, instance.inverseWorldTransform))
                    return instance.objectId;
            }
        }
        // Otherwise, recursively process the child nodes
        else {
            // Prevent stack overflow
            if (stack_size >= MAX_BVH_STACK_SIZE - 1) {
                 continue;
            } else {
                 stack[stack_size++] = node.firstChildOrPrimitive;
                 stack[stack_size++] = node.firstChildOrPrimitive + 1;
            }
        }
    }
    return -1;
}
layout(rgba8, binding = 0) uniform image2D OutputImage;

uniform mat4 u_projectionMatrix;
uniform mat4 u_viewMatrix;


void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   

    vec3 finalColor = vec3(1, 0, 0);

    mat4 projInverse = inverse(u_projectionMatrix);
    mat4 viewInverse = inverse(u_viewMatrix);
    
    const vec2 pixelCenter = pixelCoords + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(imageSize(OutputImage));
	vec2 d = inUV * 2.0 - 1.0;	
	vec4 origin = viewInverse * vec4(0,0,0,1);
	vec4 target = projInverse * vec4(d.x, d.y, 1, 1);		
	vec4 direction = viewInverse * vec4(normalize(target.xyz / target.w), 0);	

    finalColor = vec3(0, 0, 0);
    
    vec3 rayOrigin = origin.xyz;
    vec3 rayDir = direction.xyz;
            
    float minDistance = 0.01;
    float maxDistance = 100.0;

    int rayResultId = AnyHit(rayOrigin, rayDir, minDistance, maxDistance);

    if (rayResultId != -1) {     
        
        vec3 color = vec3(1,0,0);
        
        if (rayResultId == 0) {
            color = vec3(1,0,0);
        }
        if (rayResultId == 1) {
            color = vec3(0,1,0);
        }
        if (rayResultId == 2) {
            color = vec3(0,0,1);
        }
        if (rayResultId == 3) {
            color = vec3(0,1,1);
        }
        if (rayResultId == 4) {
            color = vec3(1,1,0);
        }
        if (rayResultId == 5) {
            color = vec3(1,0,1);
        }
        if (rayResultId == 6) {
            color = vec3(1,1,1);
        }

        finalColor = vec3(color);
    }

 //   finalColor = vec3(direction);

	imageStore(OutputImage, pixelCoords, vec4(finalColor, 1));
}

