#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform image2D MaskOutputImage;
layout (binding = 1) uniform sampler2D UVTexture;
layout (binding = 2) uniform sampler2D DecalTexture;

//layout(r8, binding = 1) uniform image2D outlineMask;
//layout(r8, binding = 2) uniform image2D outlineResult;

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);    

    ivec2 maskSize = imageSize(MaskOutputImage);
    ivec2 uvMapSize = textureSize(UVTexture, 0);

    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(uvMapSize);     
    vec2 geometry_uv = texture(UVTexture, uv_screenspace).xy;

    // Bail if no geometry at this pixel
    if (geometry_uv == vec2(0,0)) {
        //return;
    }
    
    float decalValue = texture(DecalTexture, uv_screenspace).r;
    decalValue *= 0.125;

    // Bail if no decal at this pixel
    if (decalValue == 0) {
        //return;
    }

    vec2 p = geometry_uv * vec2(maskSize) - vec2(0.5);
    ivec2 outputPixelCoords = ivec2(floor(p + 0.5));
    

    float oldValue = imageLoad(MaskOutputImage, outputPixelCoords).r;
    vec4 outputColor = vec4(oldValue + decalValue, 0, 0, 1);

    imageStore(MaskOutputImage, outputPixelCoords, outputColor);
}



    //
    //

    //
    //vec4 outputColor = vec4(baseColor.r, 0, 0, 1);
    //
    //int size = 1;
    //
    //if (baseColor.r > 0) {
    //    for (int x = -size; x < size; x++) {
    //        for (int y = -size; y < size; y++) {
    //            ivec2 offset = ivec2(x, y);
    //            ivec2 coords = clamp( outputPixelCoords + offset, ivec2(0, 0), outputImageSize);
    //            imageStore(OutputImage, coords, outputColor);
    //        }
    //    }
    //}