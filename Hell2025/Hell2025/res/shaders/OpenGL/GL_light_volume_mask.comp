#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, r32ui) uniform uimage3D LightVolumeMaskImage;
layout(binding = 1) uniform sampler2D WorldPositionTexture;
layout(binding = 2) uniform sampler2D NormalTexture;

uniform vec3 u_lightVolumeOffset;
uniform float u_lightVolumeSpacing;

void main() {
    ivec2 fullGBufferSize = textureSize(WorldPositionTexture, 0);
    ivec2 halfGBufferSize = fullGBufferSize / 2;

    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    if (id.x >= halfGBufferSize.x || id.y >= halfGBufferSize.y) return;

    // Map back into full-resolution pixel space
    ivec2 pixelCoords = id * 2;

    vec3 worldPos = texelFetch(WorldPositionTexture, pixelCoords, 0).xyz;
    vec3 normal = texelFetch(NormalTexture, pixelCoords, 0).xyz;
    if (normal == vec3(0.0)) return;
    normal = normalize(normal);

    // Compute which probes this pixel would sample
    vec3 safePos = worldPos + normal * 0.05;
    vec3 voxelWorldPos = (safePos - u_lightVolumeOffset) / u_lightVolumeSpacing;
    ivec3 base = ivec3(floor(voxelWorldPos));

    ivec3 lightVolumeSize = imageSize(LightVolumeMaskImage);

    // Mark the eight neighbours
    for (int dz = 0; dz <= 1; dz++) {
        for (int dy = 0; dy <= 1; dy++) {
            for (int dx = 0; dx <= 1; dx++) {
                ivec3 idx = base + ivec3(dx, dy, dz);
                if (any(lessThan(idx, ivec3(0))) || any(greaterThanEqual(idx, lightVolumeSize)))
                    continue;
        
                imageStore(LightVolumeMaskImage, idx, uvec4(1u));
            }
        }
    }
}