#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 directLighting;
};

struct BvhNode {
    vec3 boundsMin;
    uint firstChildOrPrimitive;
    vec3 boundsMax;
    uint primitiveCount;
};

struct EntityInstance {
    mat4 worldTransform;
    mat4 inverseWorldTransform;
    int rootNodeIndex;
    int padding0;
    int padding1;
    int padding2;
};

struct GridCell { // Rename to PointCloudOctrant later
    uint count;
    uint offset;
};

layout(std430, binding = 0) buffer PointCloudBuffer             { CloudPoint points[]; };
layout(std430, binding = 1) readonly buffer triangleData        { float TriangleData[]; };
layout(std430, binding = 2) readonly buffer sceneNodes          { BvhNode SceneNodes[]; };
layout(std430, binding = 3) readonly buffer meshNodes           { BvhNode MeshNodes[]; };
layout(std430, binding = 4) readonly buffer entityInstances     { EntityInstance EntityInstances[]; };
layout(std430, binding = 6) readonly buffer PointGridBuffer     { GridCell pointGrid[]; };
layout(std430, binding = 7) readonly buffer PointIndicesBuffer  { uint pointIndices[]; };

layout(rgba16f, binding = 0) uniform image3D u_previousLightVolume;
layout(rgba16f, binding = 1) uniform image3D u_currentLightVolume;
layout(r32ui, binding = 2) uniform uimage3D LightVolumeMaskImage;

#define MAX_BVH_STACK_SIZE 16
#define PI 3.14159265359
#define BLUE_NOISE_SIZE 64

uniform int u_width;
uniform int u_height;
uniform int u_depth;
uniform float u_spacing;
uniform vec3 u_offset;
uniform float u_bounceRange;

uniform uvec3 u_pointGridDimensions;
uniform vec3 u_pointGridWorldMin;
uniform vec3 u_pointGridCellSize;
uniform int u_frameIndex;
uniform vec4 u_frustumPlanes[6];
shared bool sh_workgroupVisible;


// "Slab test" ray-aabb intersection algorithm
bool IntersectNode(in vec3 rayOrigin, in vec3 rayDirInv, float minDistance, float maxDistance, in vec3 boundsMin, in vec3 boundsMax) {
    vec3 t1 = (boundsMin - rayOrigin) * rayDirInv;
    vec3 t2 = (boundsMax - rayOrigin) * rayDirInv;
    vec3 tminVec = min(t1, t2);
    vec3 tmaxVec = max(t1, t2);
    float tmin = max(max(tminVec.x, tminVec.y), max(tminVec.z, minDistance));
    float tmax = min(min(tmaxVec.x, tmaxVec.y), min(tmaxVec.z, maxDistance));
    return tmin <= tmax;
}

// Möller-Trumbore ray-triangle interesction algorithm
bool IntersectTriangle(in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance, in vec3 p0, in vec3 e1, in vec3 e2, in vec3 normal) {
    vec3 c = p0 - rayOrigin;
    vec3 r = cross(rayDir, c);
    float det = dot(normal, rayDir);
    if (det == 0.0) return false;
    float invDet = 1.0 / det;
    float u = dot(r, e2) * invDet;
    float v = dot(r, e1) * invDet;
    float w = 1.0 - u - v;
    if (u >= 0.0 && v >= 0.0 && w >= 0.0) {
        float t = dot(normal, c) * invDet;
        return (t >= minDistance && t < maxDistance);
    }
    return false;
}

// Ray-mesh bvh interesction
bool MeshAnyHit(in uint rootNodeIndex, in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance, in mat4 inverseWorldTransform) {
    uint stack[MAX_BVH_STACK_SIZE];
    uint stack_size = 0;
    stack[stack_size++] = rootNodeIndex;
    
    // Precompute transformed ray in mesh space once
    vec3 localOrigin = vec3(inverseWorldTransform * vec4(rayOrigin, 1.0));
    vec3 localEnd = vec3(inverseWorldTransform * vec4(rayOrigin + rayDir * maxDistance, 1.0));
    vec3 localDir = normalize(localEnd - localOrigin);
    float localMaxDistance = length(localEnd - localOrigin);
    float localMinDistance = minDistance * localMaxDistance / maxDistance;
    vec3 localDirInv = 1.0 / localDir;
    
    // Walk the bvh
    while (stack_size != 0) {
        uint current = stack[--stack_size];
        BvhNode node = MeshNodes[current];

        // If there was no ray hit with this node, skip th children
        if (!IntersectNode(localOrigin, localDirInv, localMinDistance, localMaxDistance, node.boundsMin, node.boundsMax)) {
            continue;
        }
        
        // If there was a hit, and the current node is a leaf, then walk the bvh of each triangles within this leaf node
        else if (node.primitiveCount > 0) {
            for (int i = 0; i < int(node.primitiveCount); i++) {
                uint triStart = node.firstChildOrPrimitive + (i * 12);
                vec3 p0 = vec3(TriangleData[triStart + 0], TriangleData[triStart + 1], TriangleData[triStart + 2]);
                vec3 e1 = vec3(TriangleData[triStart + 3], TriangleData[triStart + 4], TriangleData[triStart + 5]);
                vec3 e2 = vec3(TriangleData[triStart + 6], TriangleData[triStart + 7], TriangleData[triStart + 8]);
                vec3 normal = vec3(TriangleData[triStart + 9], TriangleData[triStart + 10], TriangleData[triStart + 11]);
                if (IntersectTriangle(localOrigin, localDir, localMinDistance, localMaxDistance, p0, e1, e2, normal))
                    return true;
            }
        } 
        // Otherwise, recursively process the child nodes
        else {
            // Prevent stack overflow
            if (stack_size >= MAX_BVH_STACK_SIZE - 1) {
                    continue;
            } else {
                    stack[stack_size++] = node.firstChildOrPrimitive;
                    stack[stack_size++] = node.firstChildOrPrimitive + 1;
            }
        }
    }
    return false;
}

// Scene-mesh bvh interesction
bool AnyHit(in vec3 rayOrigin, in vec3 rayDir, float minDistance, float maxDistance) {
    uint stack[MAX_BVH_STACK_SIZE];
    uint stack_size = 0;
    stack[stack_size++] = 0; // start with the rootnode
    vec3 rayDirInv = 1.0 / rayDir;
    
    // Walk the bvh
    while (stack_size != 0) {
        uint current = stack[--stack_size];
        BvhNode node = SceneNodes[current];

        // If there is no ray hit on the node AABB, then skip its children
        if (!IntersectNode(rayOrigin, rayDirInv, minDistance, maxDistance, node.boundsMin, node.boundsMax))
            continue;

        // If there was a hit, and the current node is a leaf, then walk the bvh of each entity within this leaf node
        else if (node.primitiveCount > 0) {
            for (int i = 0; i < int(node.primitiveCount); i++) {
                EntityInstance instance = EntityInstances[node.firstChildOrPrimitive + i];
                if (MeshAnyHit(uint(instance.rootNodeIndex), rayOrigin, rayDir, minDistance, maxDistance, instance.inverseWorldTransform))
                    return true;
            }
        }
        // Otherwise, recursively process the child nodes
        else {
            // Prevent stack overflow
            if (stack_size >= MAX_BVH_STACK_SIZE - 1) {
                 continue;
            } else {
                 stack[stack_size++] = node.firstChildOrPrimitive;
                 stack[stack_size++] = node.firstChildOrPrimitive + 1;
            }
        }
    }
    return false;
}


bool AABBIntersectsFrustum(vec3 aabbMin, vec3 aabbMax) {
    for (int i = 0; i < 6; ++i) {
        // Find the p-corner of the AABB with respect to the plane. (xyz is plane normal)
        vec3 pCorner = vec3(
            (u_frustumPlanes[i].x > 0.0) ? aabbMax.x : aabbMin.x,
            (u_frustumPlanes[i].y > 0.0) ? aabbMax.y : aabbMin.y,
            (u_frustumPlanes[i].z > 0.0) ? aabbMax.z : aabbMin.z
        );

        // If the p-corner is outside, the entire AABB is culled
        if (dot(u_frustumPlanes[i].xyz, pCorner) + u_frustumPlanes[i].w < 0.0) {
            return false;
        }
    }
    // Intersects if not culled by any plane
    return true;
}

float sqr(float x) { 
    return x * x; 
}

vec3 clampAABB(vec3 p, vec3 bmin, vec3 bmax){
    return clamp(p, bmin, bmax);
}

void main() {

    ivec3 coord = ivec3(gl_GlobalInvocationID);

    if(any(greaterThanEqual(coord, ivec3(u_width, u_height, u_depth)))) 
        return;

    if (imageLoad(LightVolumeMaskImage, coord).r == 0)
        return;

    // If it is NOT this voxels turn, just copy the old value from the read texture to the write texture and quit this thread
    uint voxel_index_1d = (coord.z * u_width * u_height) + (coord.y * u_width) + coord.x;
    if ((voxel_index_1d % 4) != u_frameIndex) {
       //vec4 previousColor = imageLoad(u_previousLightVolume, coord);
       //imageStore(u_currentLightVolume, coord, previousColor);
       //return;
    }

    vec3 voxelPos = u_offset + vec3(coord) * u_spacing;
    vec3 accumulatedColor = vec3(0.0);
    
    // Determine which grid cells to check
    vec3 searchMin = voxelPos - u_bounceRange;
    vec3 searchMax = voxelPos + u_bounceRange;
    ivec3 gridMin = ivec3(floor((searchMin - u_pointGridWorldMin) / u_pointGridCellSize));
    ivec3 gridMax = ivec3(ceil((searchMax - u_pointGridWorldMin) / u_pointGridCellSize));
    gridMin = clamp(gridMin, ivec3(0), ivec3(u_pointGridDimensions - 1));
    gridMax = clamp(gridMax, ivec3(0), ivec3(u_pointGridDimensions - 1));
    

    bool hitFound = false;

    // Loop over the relevant grid cells
    for (int z = gridMin.z; z <= gridMax.z; ++z) {
        for (int y = gridMin.y; y <= gridMax.y; ++y) {
            for (int x = gridMin.x; x <= gridMax.x; ++x) {
        
                uint gridCellIndex = (z * u_pointGridDimensions.y * u_pointGridDimensions.x) + (y * u_pointGridDimensions.x) + x;
                GridCell cell = pointGrid[gridCellIndex];
    
                // Loop over only the points inside this cell
                for (uint i = 0; i < cell.count; ++i) {
                    uint pointIndex = pointIndices[cell.offset + i];
                    CloudPoint point = points[pointIndex];
    
                    // Skip cloud points that are in shadow
                    if (point.directLighting.rgb == vec3(0.0)) {
                        continue;
                    }
    
                    float dist = length(point.position.xyz - voxelPos);
                    if (dist > u_bounceRange) continue;
    
                    vec3 rayDir = normalize(point.position.xyz - voxelPos);
    
                    // Skip cloud points facing away from the ray
                    if (dot(point.normal.xyz, rayDir) >= 0.0) {
                        continue;
                    }
    
                    if (!AnyHit(voxelPos, rayDir, 0.01, dist)) {
                        float falloff = clamp(1.0 - (dist / u_bounceRange), 0.0, 1.0);
                        float reducer = 0.0125;
                        accumulatedColor += point.directLighting.rgb * falloff * reducer;

                        hitFound = true;
                    }
                }
            }
        }
    }
    
    vec4 previousColor = imageLoad(u_previousLightVolume, coord);
    vec3 finalColor = vec3(0.0); 
    
    // Check if the previous frame's data was marked as stale (because it was culled)
    if (previousColor.a < 0.0) {
        finalColor = accumulatedColor;                               // HISTORY IS STALE
    } else {
        finalColor = mix(previousColor.rgb, accumulatedColor, 0.25); // HISTORY IS VALID
    }
    
    finalColor = accumulatedColor;
    
    //finalColor = voxelPos;

    if (hitFound) {
        //finalColor = vec3(1,0,0);
    }
    
    imageStore(u_currentLightVolume, coord, vec4(finalColor, 1.0));


    
  //  imageStore(u_currentLightVolume, coord, vec4(1,0,0, 1.0));
    
    //imageStore(u_currentLightVolume, ivec3(16, 5, 27), vec4(0, 1, 0, 1.0));
    //imageStore(u_currentLightVolume, ivec3(16, 5, 28), vec4(0, 0, 1, 1.0));
    //
    //imageStore(u_currentLightVolume, ivec3(16, 5, 32), vec4(0, 1, 0, 1.0));
    //imageStore(u_currentLightVolume, ivec3(16, 5, 31), vec4(0, 0, 1, 1.0));
    //
    //imageStore(u_currentLightVolume, ivec3(16, 1, 27), vec4(1, 0, 0, 1.0));
}

// Test to render mask colors
void main2() {
    ivec3 coord = ivec3(gl_GlobalInvocationID);

    if (coord.x >= u_width || coord.y >= u_height || coord.z >= u_depth) {
        return;
    }
    
    uint mask = imageLoad(LightVolumeMaskImage, coord).r;
    
    imageStore(u_currentLightVolume, coord, vec4(vec3(mask), 1.0));
}


