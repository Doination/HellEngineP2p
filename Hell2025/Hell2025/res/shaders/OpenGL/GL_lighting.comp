#version 460

#include "../common/lighting.glsl"
#include "../common/post_processing.glsl"
#include "../common/types.glsl"
#include "../common/util.glsl"

layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D BaseColorTexture;
layout (binding = 1) uniform sampler2D NormalTexture;
layout (binding = 2) uniform sampler2D RMATexture;
layout (binding = 3) uniform sampler2D DepthTexture;
layout (binding = 4) uniform sampler2D WorldPositionTexture;
layout (binding = 5) uniform usampler2D ViewportIndexTexture;
layout (binding = 6) uniform sampler2D EmissiveTexture;
layout (binding = 7) uniform sampler2D FlashlightCookieTexture;
layout (binding = 8) uniform sampler2DArray FlashlighShadowMapArrayTexture;
layout (binding = 9) uniform samplerCubeArray shadowMapArray;

layout(binding = 10) uniform sampler2DArray shadowMapCSM;

uniform float u_viewportWidth;
uniform float u_viewportHeight;
uniform int u_tileXCount;
uniform int u_tileYCount;
uniform int u_editorLighting;
uniform int u_ambientLightingBoost;


uniform float u_farPlane = 256.0;

layout(rgba16f, binding = 0) uniform image2D outputImage;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer {
	RendererData rendererData;
};

readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

readonly restrict layout(std430, binding = 4) buffer lightsBuffer {
	Light lights[];
};

layout(std430, binding = 5) buffer tileDataBuffer {
    TileLightData tileData[];
};


layout(std430, binding = 15) readonly buffer lightProjectionViewsBuffer { mat4 lightProjectionViews[]; };

uniform float u_cascadePlaneDistances[16];
uniform int cascadeCount;

vec3 gridSamplingDiskCSM[20] = vec3[](
    vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1),
    vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
    vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
    vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
    vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

vec3 ShadowCalculationCSM(vec3 fragPosWorldSpace, vec3 normal, vec3 lightDir, mat4 viewMatrix) {
    // select cascade layer
    vec4 fragPosViewSpace = viewMatrix * vec4(fragPosWorldSpace, 1.0);
    float depthValue = abs(fragPosViewSpace.z);

    int layer = cascadeCount - 1;
    for (int i = 0; i < cascadeCount - 1; ++i) {
        if (depthValue < u_cascadePlaneDistances[i]) {
            layer = i;
            break;
        }
    }

    vec3 normalOffset = normal * 0.05;
    vec4 fragPosLightSpace = lightProjectionViews[layer] * vec4(fragPosWorldSpace + normalOffset, 1.0);
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords.xy = projCoords.xy * 0.5 + 0.5;

    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;

    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if (currentDepth > 1.0) {
       // return vec3(1.0, 0, 0);
    }

    // original
    //float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    //const float biasModifier = 0.5f;

    // calculate bias (based on depth map resolution and slope)
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    const float biasModifier = 10.5;
    float scaledBias = bias;
    if (layer == cascadeCount)
    {
        scaledBias *= 1.0 / (u_farPlane * biasModifier);
    }
    else
    {
        scaledBias *= 1.0 / (u_cascadePlaneDistances[layer] * biasModifier);
    }

    //scaledBias = 0.0;

    // Disk Sampling for PCF
    float shadow = 0.0;
    int samples = 20;
    vec2 texelSize = 1.0 / vec2(textureSize(shadowMapCSM, 0));
    float diskRadius = 2.0; // Radius in texture space (adjust as needed)

    for (int i = 0; i < samples; ++i) {
        // Scale the disk sample by the texture size to get UV offsets
        vec2 offset = gridSamplingDiskCSM[i].xy * diskRadius * texelSize;
        float pcfDepth = texture(shadowMapCSM, vec3(clamp(projCoords.xy + offset, 0.0, 1.0), layer)).r;
        shadow += (currentDepth - scaledBias) > pcfDepth ? 1.0 : 0.0;
    }

    shadow /= float(samples);


    vec3 result = vec3(1 - shadow);
    
    
  //if (layer == 0) {
  //    result *= vec3(0, 1, 0);
  //}
  //if (layer == 1) {
  //    result *= vec3(0, 0, 1);
  //}
  //if (layer == 2) {
  //    result *= vec3(0, 1, 1);
  //}
  //if (layer == 3) {
  //    result *= vec3(1, 0, 0);
  //}

    return vec3(result);
}



void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(outputImage);


   // vec2 uv_screenspace = vec2(pixelCoords) / vec2(outputImageSize);
     vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);
    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    
    
    // Inputs
    vec4 baseColor = texture(BaseColorTexture, uv_screenspace);
    vec4 normal = texture(NormalTexture, uv_screenspace);
    vec4 rma = texture(RMATexture, uv_screenspace);
    uint viewportIndex = texture(ViewportIndexTexture, uv_screenspace).r;
    float sssRadius = texture(EmissiveTexture, uv_screenspace).a;

    // Don't apply lighting to skybox
    if (normal.x == 0.0 && normal.y == 0.0 && normal.z == 0.0) {
        //imageStore(outputImage, pixelCoords, baseColor);
        return;
    }

    // Gamma-correct the base color
    vec3 gammaBaseColor = pow(baseColor.rgb, vec3(2.2));

    float roughness = rma.r;
    float metallic = rma.g;
    
    vec2 renderTargetSize = vec2(rendererData.gBufferWidth, rendererData.gBufferHeight);
    int splitScreenMode = rendererData.splitscreenMode;

    //float clipSpaceXMin = viewportData[viewportIndex].clipSpaceXMin;
    //float clipSpaceXMax = viewportData[viewportIndex].clipSpaceXMax;
    //float clipSpaceYMin = viewportData[viewportIndex].clipSpaceYMin;
    //float clipSpaceYMax = viewportData[viewportIndex].clipSpaceYMax;
    mat4 inverseProjection = viewportData[viewportIndex].inverseProjection;
    mat4 inverseView = viewportData[viewportIndex].inverseView;
    mat4 viewMatrix = viewportData[viewportIndex].view;
    vec3 viewPos = inverseView[3].xyz;

    // Position from depth reconstruction
    //float z = texture(DepthTexture, uv_screenspace).r;
    //vec2 clipSpaceTexCoord = uv_screenspace;
	//clipSpaceTexCoord.x = (clipSpaceTexCoord.x - clipSpaceXMin) / (clipSpaceXMax - clipSpaceXMin);
	//clipSpaceTexCoord.y = (clipSpaceTexCoord.y - clipSpaceYMin) / (clipSpaceYMax - clipSpaceYMin);
	//vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    //vec4 viewSpacePosition = inverseProjection * clipSpacePosition;
    //viewSpacePosition /= viewSpacePosition.w;
    //vec4 worldSpacePosition = inverseView * viewSpacePosition;

    vec3 worldSpacePosition = texture(WorldPositionTexture, uv_screenspace).rgb;

    float fragDistance = distance(viewPos, worldSpacePosition);

    // Tile params
    uint tileIndex = gl_WorkGroupID.y * u_tileXCount + gl_WorkGroupID.x;
	uint lightCount = tileData[tileIndex].lightCount;

    // Direct light
    vec3 directLighting = vec3(0); 

    for (int i = 0; i < lightCount; i++) {    
    
		int lightIndex = int(tileData[tileIndex].lightIndices[i]);

        Light light = lights[lightIndex];
        vec3 lightPosition = vec3(light.posX, light.posY, light.posZ);
        vec3 lightColor =  vec3(light.colorR, light.colorG, light.colorB);
        float lightStrength = light.strength;
        float lightRadius = light.radius;
       
        float shadow = ShadowCalculation(lightIndex, lightPosition, lightRadius, worldSpacePosition.xyz, viewPos, normal.xyz, shadowMapArray);
        directLighting += GetDirectLighting(lightPosition, lightColor, lightRadius, lightStrength, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, viewPos) * shadow;
     
        // Subsurface scattering
        vec3 radius = vec3(sssRadius);
        vec3 subColor = Saturate(baseColor.rgb, 1.5);
        vec3 L = normalize(lightPosition - worldSpacePosition.xyz);
        float NdotL = max(dot(normal.xyz, L), 0.0);
        vec3 sss = 0.2 * exp(-3.0 * abs(NdotL) / (radius + 0.001)); 
        vec3 sssColor = subColor * radius * sss;
        float lightAttenuation = smoothstep(lightRadius, 0, length(lightPosition - worldSpacePosition.xyz));
        directLighting += sssColor * lightAttenuation * shadow;
    }

    for (int i = 0; i < 4; i++) {    
        if (fragDistance < 0.1) {
            continue;
        }
        float flashlightModifer = viewportData[i].flashlightModifer;
        if (flashlightModifer > 0.05) { 
            mat4 flashlightProjectionView = viewportData[i].flashlightProjectionView;
            vec4 flashlightDir = viewportData[i].flashlightDir;
            vec4 flashlightPosition = viewportData[i].flashlightPosition;
            vec3 flashlightViewPos = viewportData[i].inverseView[3].xyz;
            vec3 playerForward = -normalize(viewportData[i].inverseView[2].xyz);
            int layerIndex = i;			
		    vec3 spotLightPos = flashlightPosition.xyz;
            vec3 camightRight = normalize(viewportData[i].inverseView[0].xyz);
		    vec3 spotLightDir = flashlightDir.xyz;
            vec3 spotLightColor = vec3(0.9, 0.95, 1.1);
            float fresnelReflect = 0.9;
            float spotLightRadius = 50.0;
            float spotLightStregth = 4.5;
            
            if (worldSpacePosition.y < 10) {
                spotLightStregth = 25;
            }

            float innerAngle = cos(radians(5.0 * flashlightModifer));
            float outerAngle = cos(radians(30.0));         
            mat4 lightProjectionView = flashlightProjectionView;
            vec3 cookie = ApplyCookie(lightProjectionView, worldSpacePosition.xyz, spotLightPos, spotLightColor, 10, FlashlightCookieTexture);
            vec3 spotLighting = GetSpotlightLighting(spotLightPos, spotLightDir, spotLightColor, spotLightRadius, spotLightStregth, innerAngle, outerAngle, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, flashlightViewPos, lightProjectionView);
            vec4 FragPosLightSpace = lightProjectionView * vec4(worldSpacePosition.xyz, 1.0);
            float shadow = SpotlightShadowCalculation(FragPosLightSpace, normal.xyz, spotLightDir, worldSpacePosition.xyz, spotLightPos, flashlightViewPos, FlashlighShadowMapArrayTexture, layerIndex);  

            spotLighting *= vec3(1 - shadow);
            spotLighting *= cookie *  spotLightColor;
            directLighting += vec3(spotLighting) * flashlightModifer;
        }
    }

    // Moon light
    vec3 moonColor = vec3(1.0, 0.9, 0.9);
    moonColor = vec3(1, 0.7799999713897705, 0.5289999842643738);
    vec3 moonLightDir = normalize(vec3(0.0, 0.2 , 0.5));
    float moonLightStrength = 0.25;
       
    //float shadow = ShadowCalculation(lightIndex, lightPosition, lightRadius, worldSpacePosition.xyz, viewPos, normal.xyz, shadowMapArray);
    vec3 moonLighting = GetDirectionalLighting(moonLightDir, moonColor, moonLightStrength, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, viewPos);
    vec3 csmShadow = ShadowCalculationCSM(worldSpacePosition.xyz, normal.xyz, moonLightDir, viewMatrix);
    moonLighting *= csmShadow;

    // Moonlight subsurface scattering
    vec3 radius = vec3(sssRadius);
    vec3 subColor = Saturate(baseColor.rgb, 1.5);
    vec3 L = moonLightDir;
    float NdotL = max(dot(normal.xyz, L), 0.0);
    vec3 sss = 0.2 * exp(-3.0 * abs(NdotL) / (radius + 0.001)); 
    vec3 sssColor = subColor * radius * sss;
    moonLighting += sssColor * csmShadow * 0.1;

    // Self light hack (RE7 style) 
    //if (viewportData[viewportIndex].flashlightModifer > 0.1) { 
    //    vec3 spotLightPos = viewPos;
    //    vec3 spotLightDir = viewportData[viewportIndex].flashlightDir.xyz;
    //    vec3 spotLightColor = vec3(0.9, 0.95, 1.1);
    //
    //    spotLightColor - vec3(1.00, 0.7799999713897705, 0.5289999842643738);
    //
    //    float spotLightRadius = 0.085;
    //    float spotLightStregth = 30.0;        
    //    float innerAngle = cos(radians(00.0 * viewportData[viewportIndex].flashlightModifer));
    //    float outerAngle = cos(radians(40.0));   
    //
    //
    //    mat4 lightProjectionView = viewportData[viewportIndex].flashlightProjectionView;
    //    vec4 flashlightDir = viewportData[viewportIndex].flashlightDir;
    //    vec4 flashlightPosition = viewportData[viewportIndex].flashlightPosition;
    //    vec3 flashlightViewPos = viewportData[viewportIndex].inverseView[3].xyz;
    //
    //
    //    vec3 re7Lighting = GetSpotlightLighting(spotLightPos, spotLightDir, spotLightColor, spotLightRadius, spotLightStregth, innerAngle, outerAngle, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, flashlightViewPos, lightProjectionView);
    //    directLighting += re7Lighting;
    //}

    if (viewportData[viewportIndex].flashlightModifer > 0.1) { 
        vec3 offset = viewportData[viewportIndex].cameraForward.xyz * 0.001;
        vec3 spotLightPos = viewPos + offset;
        vec3 spotLightDir = viewportData[viewportIndex].flashlightDir.xyz;
        vec3 spotLightColor = vec3(0.9, 0.95, 1.1);

        spotLightColor - vec3(1.00, 0.7799999713897705, 0.5289999842643738);

        float spotLightRadius = 0.0765;
        float spotLightStregth = 30.0;        
        float innerAngle = cos(radians(00.0 * viewportData[viewportIndex].flashlightModifer));
        float outerAngle = cos(radians(40.0));   

        mat4 lightProjectionView = viewportData[viewportIndex].flashlightProjectionView;
        vec4 flashlightDir = viewportData[viewportIndex].flashlightDir;
        vec4 flashlightPosition = viewportData[viewportIndex].flashlightPosition;
        vec3 flashlightViewPos = viewportData[viewportIndex].inverseView[3].xyz;


        vec3 re7Lighting = GetSpotlightLighting(spotLightPos, spotLightDir, spotLightColor, spotLightRadius, spotLightStregth, innerAngle, outerAngle, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, flashlightViewPos, lightProjectionView);
        directLighting += re7Lighting;
    }
    

    // Ambient light
    vec3 amibentLightColor = vec3(1, 0.98, 0.94);
    float ambientIntensity = 0.0005;

    vec3 ambientColor = baseColor.rgb * amibentLightColor;
    vec3 ambientLighting = ambientColor * ambientIntensity;

    // Ambient hack
	float factor = min(1, 1 - metallic * 1.0);
	ambientLighting *= (1.0) * vec3(factor);
    
    // Alpha
    float finalAlpha = baseColor.a;
    
    // Composite
    vec3 finalColor = directLighting. rgb + ambientLighting + moonLighting;

    // Ambient occlusion
    finalColor *= rma.b;

    //finalColor = moonLight;

    // Emissive
    vec3 emssiveColor = texture(EmissiveTexture, uv_screenspace).rgb;
    //finalColor += emssiveColor;

    finalColor.rgb = finalColor.rgb * finalAlpha;    
    vec4 outputColor = vec4(finalColor, finalAlpha);
    

    
  //  if (false) {
  //      if (viewportIndex == 0) {
  //          outputColor.rgb = vec3(1.0) - outputColor.rgb;
  //      }
  //      if (viewportIndex == 1) {
  //          outputColor.rgb *= vec3(1, 0, 0);
  //      }
  //      if (viewportIndex == 2) {
  //          outputColor.rgb *= vec3(0, 1, 0);
  //      }
  //      if (viewportIndex == 3) {
  //          outputColor.rgb *= vec3(0, 0, 1);
  //      }
  //  }
    

    
    // Hack to render height map brush
    vec2 mouseUV = vec2(rendererData.normalizedMouseX, 1 - rendererData.normalizedMouseY);
    vec3 mouseWorldPos = texture(WorldPositionTexture, mouseUV).rgb;
    int u_brushSize = 16;
    float brushSizeWorld = u_brushSize * 0.25;
    float dist = distance(mouseWorldPos * vec3(1,0,1), worldSpacePosition.xyz * vec3(1,0,1));
    float innerRadius = brushSizeWorld * 0.7; // fade starts
    float outerRadius = brushSizeWorld * 1.0; // fade ends
    float falloff = smoothstep(innerRadius, outerRadius, dist);
    float alpha = 1.0 - falloff;
    //outputColor.rgb += vec3(0, 0.5, 1) * alpha * 0.25;


    // Output
    imageStore(outputImage, pixelCoords, outputColor);

        
    // vec2 viewportPos = vec2(viewportData[viewportIndex].posX, viewportData[viewportIndex].posY);
    // vec2 viewportSize = vec2(viewportData[viewportIndex].sizeX, viewportData[viewportIndex].sizeY);
    // vec2 screenUV = WorldToScreen(worldSpacePosition.rgb, viewportData[viewportIndex].projectionView, viewportPos, viewportSize);
    // imageStore(outputImage, pixelCoords, vec4(screenUV, 0, 1));
    // imageStore(outputImage, pixelCoords, vec4(normal.rgb, 1.0));    
    // imageStore(outputImage, pixelCoords, vec4(baseColor.rgb, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(rma.rgb, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(worldSpacePosition.rgb, 1.0)); 
    // imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(screenUV, 0.0, 1.0));
    // vec3 sceneWorldPos = texture(WorldPositionTexture, screenUV).rgb;
    // imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(sceneWorldPos, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(worldSpacePosition.rgb * 0.1, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(color.rgb, 1.0));     

    
    //float heightmap = texture(HeightMapTestTexture, uv_screenspace).r;
    //imageStore(outputImage, pixelCoords, vec4(heightmap, 0, 0, 1));
}