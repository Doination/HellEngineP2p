#version 430
#include "../common/constants.glsl"

layout(local_size_x = 1, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform image2D WaterColorImage; // output

void main() {
    return;

	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(WaterColorImage);
    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);

    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    
    
    vec3 lastValidColor = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < outputImageSize.x; i++) {   
        ivec2 sampleCoords = pixelCoords + ivec2(i, 0);        
        vec3 sampleWaterColor = imageLoad(WaterColorImage, sampleCoords).rgb;
        
        // Store the last valid color if you found one
        if (sampleWaterColor != vec3(0.0, 0.0, 0.0)) {
            lastValidColor = sampleWaterColor;
        }
        // Otherwise draw it into this black gap
        else {
            imageStore(WaterColorImage, sampleCoords, vec4(vec3(0, 0, 1), 1.0));
        }   

    }
    

}