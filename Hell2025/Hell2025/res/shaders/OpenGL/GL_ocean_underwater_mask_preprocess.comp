#version 430 core
#include "../common/constants.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(r8, binding = 0) uniform image2D UnderwaterMaskTexture; // input / output
layout(binding = 1) uniform sampler2D WorldPositionTexture;
layout(binding = 2) uniform sampler2D DisplacementTexture_band0;
layout(binding = 3) uniform sampler2D DisplacementTexture_band1;

uniform int u_mode;
uniform float u_oceanOriginY;

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(UnderwaterMaskTexture);
    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);

    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    

    // Is this pixel already confirmed under or abovw water?
    float currentMaskState = imageLoad(UnderwaterMaskTexture, pixelCoords).r;
    if (currentMaskState > 0.0) {
        return;
    }

    vec3 worldPosition = texture(WorldPositionTexture, uv_screenspace).rgb;

    float fftResoltion_band0 = 512.0;
    float fftResoltion_band1 = 512.0;
    float patchSize_band0 = 8.0;
    float patchSize_band1 = 13.123;

    highp vec2 uv_band0 = fract(worldPosition.xz / patchSize_band0);
    highp vec2 uv_band1 = fract(worldPosition.xz / patchSize_band1);
    
    float displacementScale_band0 = patchSize_band0 / fftResoltion_band0;
    float displacementScale_band1 = patchSize_band1 / fftResoltion_band1;
    
    const float gridCellsPerWorldUnit_band0 = 1.0 / displacementScale_band0;
    const float gridCellsPerWorldUnit_band1 = 1.0 / displacementScale_band1;

    // Estimate band 0 position
    vec2 bestGuessUV = uv_band0;
    float dispX = texture(DisplacementTexture_band0, bestGuessUV).x;
    float dispZ = texture(DisplacementTexture_band0, bestGuessUV).z;
    vec2 estimatedDisplacement = vec2(dispX, dispZ) / gridCellsPerWorldUnit_band0;
    vec2 estimatedWorldPosition = worldPosition.xz - estimatedDisplacement;
    vec2 estimatedUV = fract(estimatedWorldPosition / patchSize_band0);
    vec3 bestGuessWorldPos_band0 = texture(DisplacementTexture_band0, estimatedUV).xyz * displacementScale_band0;

    // Estimate band 0 position
    bestGuessUV = uv_band1;
    dispX = texture(DisplacementTexture_band1, bestGuessUV).x;
    dispZ = texture(DisplacementTexture_band1, bestGuessUV).z;
    estimatedDisplacement = vec2(dispX, dispZ) / gridCellsPerWorldUnit_band1;
    estimatedWorldPosition = worldPosition.xz - estimatedDisplacement;
    estimatedUV = fract(estimatedWorldPosition / patchSize_band1);
    vec3 bestGuessWorldPos_band1 = texture(DisplacementTexture_band1, estimatedUV).xyz * displacementScale_band1;

    float height = mix(bestGuessWorldPos_band0.y, bestGuessWorldPos_band1.y, 0.5);
    
    height = bestGuessWorldPos_band0.y + bestGuessWorldPos_band1.y;
    
    if (u_mode == 1) {
        height = bestGuessWorldPos_band0.y;
    }
    if (u_mode == 2) {
        height = bestGuessWorldPos_band1.y;
    }

    float waterHeight = (height) + u_oceanOriginY;
    bool isUnderwater = worldPosition.y < waterHeight;

    if (isUnderwater) {
        imageStore(UnderwaterMaskTexture, pixelCoords, vec4(0.5, 0, 0, 0));
    }
}
