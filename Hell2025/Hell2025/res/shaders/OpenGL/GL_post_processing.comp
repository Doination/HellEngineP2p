#version 430 core
#include "../common/post_processing.glsl"
#include "../common/types.glsl"
#include "../common/util.glsl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform image2D LightingImage;
layout(rgba16f, binding = 1) uniform image2D NormalImage;
layout (binding = 2) uniform usampler2D ViewportIndexTexture;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer { RendererData rendererData; };
readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer { ViewportData viewportData[]; };

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
	vec2 outputImageSize = vec2(rendererData.gBufferWidth, rendererData.gBufferHeight);
    vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);

    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    

	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    vec3 lighting = imageLoad(LightingImage, texCoord).rgb;
    vec3 normal = imageLoad(NormalImage, texCoord).rgb;
    uint viewportIndex = texture(ViewportIndexTexture, uv_screenspace).r;
    
    vec3 finalColor = lighting;

    vec3 colorTint = viewportData[viewportIndex].colorTint.rgb;
    //colorTint *= vec3(2,1,1);
    colorTint *= vec3(1, 0.925, 0.925);

    // Tone mapping
    finalColor = Tonemap_ACES(lighting);   
        
    // Gamma correct
    finalColor = pow(finalColor, vec3(1.0/2.2));
    finalColor = clamp(finalColor, 0, 1);
	
    // Some more yolo tone mapping
    finalColor = mix(finalColor, Tonemap_ACES(finalColor), 0.35);  
    
    // Color tint
    finalColor *= colorTint;

    // Contrast
    finalColor.rgb = AdjustContrast(finalColor.rgb, viewportData[viewportIndex].colorContrast); 

	// Noise
    vec2 uv = uv_screenspace;
    float time = rendererData.time;
	vec2 coord = pixelCoords;
	vec2 rest = modf(uv * outputImageSize, coord);
	vec3 noise00 = FilmPixel(coord / outputImageSize, time);
	vec3 noise01 = FilmPixel((coord + vec2(0, 1)) / outputImageSize, time);
	vec3 noise10 = FilmPixel((coord + vec2(1, 0)) / outputImageSize, time);
	vec3 noise11 = FilmPixel((coord + vec2(1, 1)) / outputImageSize, time);
	vec3 noise = mix(mix(noise00, noise01, rest.y), mix(noise10, noise11, rest.y), rest.x) * vec3(0.7, 0.6, 0.8);
	float noiseSpeed = 15.0;
	float x = Rand(uv + Rand(vec2(int(time * noiseSpeed), int(-time * noiseSpeed))));
	float noiseFactor = 0.035;
	finalColor = finalColor + (x * -noiseFactor) + (noiseFactor / 2);
        
	imageStore(LightingImage, texCoord, vec4(finalColor, 1));

    // Don't apply lighting to skybox
    //float skyboxFlag = float(normal.x == 0.0 && normal.y == 0.0 && normal.z == 0.0);
    //finalColor.rgb = mix(finalColor.rgb, lighting.rgb, skyboxFlag);
	//imageStore(LightingImage, texCoord, vec4(finalColor, 1));
}

