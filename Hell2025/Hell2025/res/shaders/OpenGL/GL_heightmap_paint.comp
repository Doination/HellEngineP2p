#version 430 core
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "../common/constants.glsl"
#include "../common/types.glsl"

layout (binding = 0, r16f) uniform image2D HeightMapImage;
layout(binding = 1) uniform sampler2D WorldPositionTexture;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer {
	RendererData rendererData;
};

uniform float u_brushStrength;
uniform float u_noiseStrength;
uniform float u_noiseScale;
uniform float u_minPaintHeight;
uniform float u_maxPaintHeight;
uniform float u_brushSize;

vec2 randomGradient(vec2 p) {
    p = mod(p, vec2(289.0));
    float x = fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
    float y = fract(sin(dot(p, vec2(269.5, 183.3))) * 43758.5453);
    return normalize(vec2(x, y) * 2.0 - 1.0);
}

float smoothStepInterp(float a, float b, float t) {
    return mix(a, b, t * t * (3.0 - 2.0 * t));
}

float perlinNoise(vec2 uv) {
    vec2 p = floor(uv);
    vec2 f = fract(uv);

    vec2 g00 = randomGradient(p);
    vec2 g10 = randomGradient(p + vec2(1.0, 0.0));
    vec2 g01 = randomGradient(p + vec2(0.0, 1.0));
    vec2 g11 = randomGradient(p + vec2(1.0, 1.0));

    float d00 = dot(g00, f);
    float d10 = dot(g10, f - vec2(1.0, 0.0));
    float d01 = dot(g01, f - vec2(0.0, 1.0));
    float d11 = dot(g11, f - vec2(1.0, 1.0));

    float tx = smoothStepInterp(d00, d10, f.x);
    float ty = smoothStepInterp(d01, d11, f.x);
    
    return smoothStepInterp(tx, ty, f.y);
}

float fbm(vec2 uv, int octaves) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;

    for (int i = 0; i < octaves; i++) { 
        value += amplitude * perlinNoise(uv * frequency);
        frequency *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec2 mouseUV = vec2(rendererData.normalizedMouseX, 1.0 - rendererData.normalizedMouseY);

    if (mouseUV.x < 0.0 || mouseUV.x > 1.0 || mouseUV.y < 0.0 || mouseUV.y > 1.0) {
        return;
    }

    vec3 mouseWorldPos = texture(WorldPositionTexture, mouseUV).rgb;
    int paintX = int(mouseWorldPos.x / HEIGHTMAP_SCALE_XZ);
    int paintY = int(mouseWorldPos.z / HEIGHTMAP_SCALE_XZ);

    float dist = length(vec2(pixelCoords) - vec2(paintX, paintY));

    float brushRadiusPx = u_brushSize;
    if (dist > brushRadiusPx) {
        return;
    }

    float falloff = smoothstep(0.0, brushRadiusPx, dist);

    float oldHeight = imageLoad(HeightMapImage, pixelCoords).r;
    float delta    = u_brushStrength * (1.0 - falloff) * 0.1;

    // Clamp it
    float normalizedMin = u_minPaintHeight / HEIGHTMAP_SCALE_Y;
    float normalizedMax = u_maxPaintHeight / HEIGHTMAP_SCALE_Y;

    // Noise
    float noiseDelta = 0.0;
    if (u_noiseStrength > 0.0) {
        const float noiseScale = u_noiseScale * 0.1;
        const int noiseOctaves  = 5;
        vec2 noiseUV = vec2(pixelCoords) * noiseScale + vec2(paintX, paintY) * noiseScale;
        float n = fbm(noiseUV, noiseOctaves);
        n = (n + 1.0) * 0.5;            // map [-1,1] to [0,1]
        noiseDelta = (n - 0.5)          // center at zero
                   * u_noiseStrength    // global strength
                   * (1.0 - falloff)    // fade out at edges
                   * 0.1;               // final noise scale
    }

    // Final new height
    float newHeight = clamp(oldHeight + delta + noiseDelta, normalizedMin, normalizedMax);

    imageStore(HeightMapImage, pixelCoords, vec4(newHeight, 0.0, 0.0, 1.0));
}